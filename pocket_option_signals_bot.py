# pocket_option_signals_bot.py
# Pocket Option Signals Telegram Bot (ready-to-run)
# Token, REF_LINK, BONUS_TEXT and ADMIN_ID are already filled in.
import os
import json
import logging
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ—Ä—É—Ç—Å—è –∏–∑ env –∏–ª–∏ –±–µ—Ä—É—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ---------------------
TOKEN = os.getenv("TOKEN", "8265669590:AAGgSYBz3FAIW7ghrr37k_UXPihl_UpJ8C8")
REF_LINK = os.getenv("REF_LINK", "https://po-ru4.click/register?utm_campaign=824830&utm_source=affiliate&utm_medium=sr&a=vn8O5uQ2KKyJGY&ac=botvtelegram&code=50START")
BONUS_TEXT = os.getenv("BONUS_TEXT", "50START (–±–æ–Ω—É—Å 50%; –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç $50)")

ADMIN_ID_ENV = os.getenv("ADMIN_ID")
if ADMIN_ID_ENV:
    try:
        ADMIN_ID = int(ADMIN_ID_ENV)
    except Exception:
        ADMIN_ID = None
else:
    ADMIN_ID = 8199618278  # –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω —Ç–≤–æ–π ID

DB_FILE = os.getenv("DB_FILE", "db.json")

# --------------------- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ ---------------------
PAIRS = {
    "EUR/USD": "eur-usd",
    "GBP/USD": "gbp-usd",
    "USD/JPY": "usd-jpy",
    "AUD/USD": "aud-usd",
    "USD/CAD": "usd-cad"
}

TIMEFRAMES = {
    "1 –º–∏–Ω": "1m",
    "5 –º–∏–Ω": "5m",
    "15 –º–∏–Ω": "15m",
    "1 —á–∞—Å": "1h",
    "4 —á–∞—Å–∞": "4h",
    "1 –¥–µ–Ω—å": "1D"
}

# --------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---------------------
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --------------------- DB helpers ---------------------
def load_db():
    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"pending": {}, "approved": {}}

def save_db(db):
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

db = load_db()

# --------------------- Keyboards ---------------------
def pairs_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text=name, callback_data=f"pair|{slug}") for name, slug in PAIRS.items()]
    kb.add(*buttons)
    return kb

def timeframes_keyboard(pair_slug):
    kb = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(text=name, callback_data=f"tf|{pair_slug}|{code}") for name, code in TIMEFRAMES.items()]
    kb.add(*buttons)
    return kb

# --------------------- –•—ç–Ω–¥–ª–µ—Ä—ã ---------------------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in db.get("approved", {}):
        text = (
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º. –ù–∞–∂–º–∏ /signal —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä—É."
        )
        await message.answer(text)
        return

    if user_id not in db.get("pending", {}):
        db.setdefault("pending", {})[user_id] = {
            "username": message.from_user.username or "",
            "first_name": message.from_user.first_name or ""
        }
        save_db(db)

    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ:\n\n"
        f"{REF_LINK}\n\n"
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–≤–æ–π Pocket Option ID –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "/id <—Ç–≤–æ–π_PO_id>\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–º —Ç–µ–±–µ –æ—Ç–∫—Ä–æ—é—Ç –¥–æ—Å—Ç—É–ø."
    )
    await message.answer(text)

@dp.message_handler(commands=["id"])
async def cmd_id(message: types.Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /id 123456")
        return
    user_id = str(message.from_user.id)
    po_id = parts[1]
    db.setdefault("pending", {}).setdefault(user_id, {})["po_id"] = po_id
    save_db(db)
    await message.reply("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π PO ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º.")

@dp.message_handler(commands=["pending"])
async def cmd_pending(message: types.Message):
    if ADMIN_ID is None or message.from_user.id != ADMIN_ID:
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    pend = db.get("pending", {})
    if not pend:
        await message.reply("–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—É—Å—Ç.")
        return
    text = "–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for uid, info in pend.items():
        text += f"- {uid} | {info.get('first_name','')} @{info.get('username','')} | PO_ID: {info.get('po_id','-')}\n"
    await message.reply(text)

@dp.message_handler(commands=["approve"])
async def cmd_approve(message: types.Message):
    if ADMIN_ID is None or message.from_user.id != ADMIN_ID:
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <telegram_user_id>")
        return
    user_to = parts[1]
    if user_to in db.get("pending", {}):
        db.setdefault("approved", {})[user_to] = db["pending"].pop(user_to)
        save_db(db)
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to} –æ–¥–æ–±—Ä–µ–Ω.")
        try:
            await bot.send_message(int(user_to), "–¢–µ–±–µ –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º! –ò—Å–ø–æ–ª—å–∑—É–π /signal")
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö.")

@dp.message_handler(commands=["revoke"])
async def cmd_revoke(message: types.Message):
    if ADMIN_ID is None or message.from_user.id != ADMIN_ID:
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <telegram_user_id>")
        return
    user_to = parts[1]
    if user_to in db.get("approved", {}):
        db.setdefault("pending", {})[user_to] = db["approved"].pop(user_to)
        save_db(db)
        await message.reply(f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to} –æ—Ç–æ–∑–≤–∞–Ω –∏ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏–µ.")
        try:
            await bot.send_message(int(user_to), "–¢–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.")
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö.")

@dp.message_handler(commands=["signal"])
async def cmd_signal(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in db.get("approved", {}):
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –∏ –¥–æ–∂–¥–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return
    await message.reply("–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=pairs_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("pair|"))
async def callback_pair(callback_query: types.CallbackQuery):
    await callback_query.answer()
    _, pair_slug = callback_query.data.split("|", 1)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=timeframes_keyboard(pair_slug))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("tf|"))
async def callback_tf(callback_query: types.CallbackQuery):
    await callback_query.answer()
    _, pair_slug, tf_code = callback_query.data.split("|", 2)

    user_id = str(callback_query.from_user.id)
    if user_id not in db.get("approved", {}):
        await bot.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏–≥–Ω–∞–ª–∞–º.")
        return

    pair_name = next((k for k, v in PAIRS.items() if v == pair_slug), pair_slug)
    tf_name = next((k for k, v in TIMEFRAMES.items() if v == tf_code), tf_code)

    try:
        direction, raw_label = get_investing_signal(pair_slug, tf_code)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Investing.com")
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    emoji = "üìà" if direction == "–í–≤–µ—Ä—Ö" else "üìâ" if direction == "–í–Ω–∏–∑" else "‚ö™"
    text = (
        f"üì¢ –°–∏–≥–Ω–∞–ª –¥–ª—è {pair_name} ({tf_name})\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction} {emoji}\n\n"
        f"üéÅ –ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: {BONUS_TEXT}\n"
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –±–æ–Ω—É—Å: {REF_LINK}"
    )
    await bot.send_message(callback_query.from_user.id, text)

# --------------------- –ü–∞—Ä—Å–µ—Ä Investing.com ---------------------
def get_investing_signal(pair_slug: str, tf: str):
    '''
    –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∏—Ç–æ–≥–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (direction, raw_label) ‚Äî direction: "–í–≤–µ—Ä—Ö"/"–í–Ω–∏–∑"/"–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ".
    '''
    url = f"https://www.investing.com/currencies/{pair_slug}-technical"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
    }
    resp = requests.get(url, headers=headers, timeout=15)
    if resp.status_code != 200:
        raise RuntimeError(f"HTTP {resp.status_code}")

    soup = BeautifulSoup(resp.text, "html.parser")

    # 1) –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å –∫–ª–∞—Å—Å–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "technicalSummaryTbl" –∏–ª–∏ –ø–æ—Ö–æ–∂—É—é
    label = None
    table = soup.find("table", {"class": lambda v: v and "technicalSummaryTbl" in v})
    if table:
        for row in table.find_all("tr"):
            cols = [c.get_text(strip=True) for c in row.find_all(["th", "td"])]
            if not cols:
                continue
            if tf.lower() in cols[0].lower():
                label = cols[-1]
                break

    # 2) –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–≤—ã–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ—Ç–æ–∫
    if not label:
        text = soup.get_text(separator=" ").strip()
        for candidate in ["Strong Buy", "Buy", "Neutral", "Sell", "Strong Sell"]:
            if candidate.lower() in text.lower():
                label = candidate
                break

    # 3) –ë–æ–ª—å—à–µ —ç–≤—Ä–∏—Å—Ç–∏–∫: –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–ª–æ–∫–∏
    if not label:
        blocks = soup.find_all(lambda tag: tag.name in ["div", "section"] and "summary" in (tag.get("class") or []))
        for b in blocks:
            for candidate in ["Strong Buy", "Buy", "Neutral", "Sell", "Strong Sell"]:
                if candidate.lower() in b.get_text(separator=" ").lower():
                    label = candidate
                    break
            if label:
                break

    # 4) –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏—â–µ–º –ø—Ä—è–º–æ –≤ HTML
    if not label:
        for candidate in ["Strong Buy", "Buy", "Neutral", "Sell", "Strong Sell"]:
            if candidate.lower() in resp.text.lower():
                label = candidate
                break

    if not label:
        return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ", "Unknown"

    l = label.lower()
    if "buy" in l:
        return "–í–≤–µ—Ä—Ö", label
    if "sell" in l:
        return "–í–Ω–∏–∑", label
    return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ", label

# --------------------- –ó–∞–ø—É—Å–∫ ---------------------
if __name__ == "__main__":
    save_db(db)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if ADMIN_ID is None:
        logger.warning("ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID –∏–ª–∏ –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π ID –≤ –∫–æ–¥–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã.")
    executor.start_polling(dp, skip_updates=True)
